[tool:pytest]
# Pytest configuration for Veridoc Photo Verification System

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
norecursedirs = .venv venv venv_new

# Output options
addopts = 
    -v
    --tb=short
    --strict-markers
    --strict-config
    --color=yes
    --durations=10
    --cov=ai
    --cov=core
    --cov=validation
    --cov=quality
    --cov=autofix
    --cov=rules
    --cov=export
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-report=term-missing
    --cov-fail-under=80
    --junit-xml=junit.xml

# Markers
markers =
    unit: Unit tests for individual components
    integration: Integration tests for component interaction
    compliance: ICAO compliance validation tests
    performance: Performance and benchmarking tests
    accuracy: Accuracy validation tests
    edge_case: Edge case and error handling tests
    ci: Tests suitable for CI/CD pipeline
    slow: Tests that take a long time to run
    gpu: Tests that require GPU resources
    network: Tests that require network access

# Minimum version requirements
minversion = 6.0

# Test timeout (in seconds)
timeout = 300

# Warnings
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning

# Logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Coverage options
[coverage:run]
source = .
omit = 
    */tests/*
    */venv/*
    */build/*
    */dist/*
    */__pycache__/*
    */temp/*
    */logs/*
    */export/*
    setup.py
    conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml